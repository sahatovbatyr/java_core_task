package paterns.struct_bridge;

//Пример применения шаблона проектирования "Bridge" в промышленной разработке можно
//рассмотреть на примере разработки графического интерфейса пользователя (GUI)
//для мобильных приложений.
//
//Предположим, у вас есть задача создать приложение, которое должно работать на
//различных мобильных платформах, таких как iOS и Android, а также поддерживать разные
//версии этих платформ. В таком случае, шаблон "Bridge" можно использовать для разделения
//абстракции (GUI) от её реализации (нативный код для каждой платформы).
//
//На уровне абстракции вы определяете интерфейс для компонентов GUI, таких как кнопки,
//текстовые поля и окна. Затем вы создаете классы-реализации этого интерфейса для каждой
//поддерживаемой платформы: один набор классов для iOS и другой для Android.
//
//С использованием шаблона "Bridge" ваш клиентский код (код приложения) работает только с
//        абстракцией GUI, ничего не зная о конкретных реализациях для каждой платформы.
//При необходимости поддержки новой платформы вам нужно будет просто создать
//новые классы-реализации без изменения клиентского кода.
//
//Это позволяет сократить объем кода, облегчает его поддержку и расширение, а также
//обеспечивает высокую степень гибкости и масштабируемости вашего приложения.


//Это простой пример, демонстрирующий применение шаблона "Bridge" в разработке мобильных
//приложений на Java. Клиентский код (в методе main) работает с абстракцией GUI, не зная
//о конкретной реализации для каждой платформы, что делает приложение
//более гибким и легко расширяемым.

public class MainApp {

    public static void main(String[] args) {
        // Создание GUI для iOS
        GUI iosGUI = new MobileGUI(new IOSGUIComponent());
        iosGUI.drawGUI();

        // Создание GUI для Android
        GUI androidGUI = new MobileGUI(new AndroidGUIComponent());
        androidGUI.drawGUI();
    }


}

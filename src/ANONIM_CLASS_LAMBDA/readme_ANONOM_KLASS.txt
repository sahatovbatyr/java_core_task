Анонимный класс в Java — это класс, который не имеет имени и объявляется и инстанцируется одновременно.
 Они позволяют вам создавать одноразовые реализации классов,
 обычно для интерфейсов или абстрактных классов, непосредственно в месте использования.

 Анонимные классы в Java были созданы для упрощения и сокращения кода,
 особенно когда требуется однократное использование класса, например,
 для реализации интерфейсов или абстрактных классов на месте.
 Они позволяют писать код более кратко и четко, избегая создания
 отдельных именованных классов для простых задач.

 Основные характеристики:
 Безымянный: Анонимные классы не имеют имени.
 Локальный: Анонимные классы объявляются внутри метода, конструкторе или блоке кода.
 Ограниченный: Анонимные классы имеют доступ к переменным из охватывающей области,
 но эти переменные должны быть финальными или эффективно финальными (не изменяться после инициализации).

 Зачем нужен анонимный класс?
 Краткость и удобство: Уменьшает количество кода, когда вам нужна одноразовая реализация
 интерфейса или абстрактного класса.

 Читаемость и структурированность: Делает код более компактным и читабельным,
  так как реализация находится непосредственно в месте использования.
 Замена интерфейсов: Часто используется для создания обратных вызовов,
 обработчиков событий и других случаев, где требуется передать блок кода.

 ***************************************** Анонимный класс ***************************
 abstract class MyClass {
     abstract void myMethod();
 }

 MyClass myClass = new MyClass(){
 ......
 }
************************************************

Расширение абстрактных классов:
abstract class Animal {
    abstract void makeSound();
}

public class Main {
    public static void main(String[] args) {
        // Анонимный класс, расширяющий абстрактный класс Animal
        Animal myAnimal = new Animal() {
            @Override
            void makeSound() {
                System.out.println("Anonymous animal sound");
            }
        };

        myAnimal.makeSound();
    }
}

Этот пример показывает, как можно использовать анонимный класс для
создания конкретной реализации абстрактного класса Animal.
**************************************************************

import javax.swing.JButton;
import javax.swing.JFrame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class Main {
    public static void main(String[] args) {
        JFrame frame = new JFrame("Example");
        JButton button = new JButton("Click me");

        // Анонимный класс для обработки событий нажатия на кнопку
        button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.out.println("Button clicked!");
            }
        });

        frame.add(button);
        frame.setSize(200, 200);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }
}
Здесь анонимный класс используется для обработки событий нажатия на кнопку,
реализуя интерфейс ActionListener.
**********************************************************************************

Анонимные классы полезны в ситуациях, когда требуется одноразовая реализация интерфейсов
 или абстрактных классов. Они позволяют писать более компактный и структурированный код,
  особенно при обработке событий и реализации обратных вызовов. Однако следует использовать
  их с осторожностью, чтобы не ухудшить читаемость кода при более сложных реализациях.

